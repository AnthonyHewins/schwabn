// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: schwabn/stream/v0/future.proto

package stream

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SecurityStatus int32

const (
	SecurityStatus_SECURITY_STATUS_UNSPECIFIED SecurityStatus = 0
	SecurityStatus_SECURITY_STATUS_NORMAL      SecurityStatus = 1
	SecurityStatus_SECURITY_STATUS_HALTED      SecurityStatus = 2
	SecurityStatus_SECURITY_STATUS_CLOSED      SecurityStatus = 3
)

// Enum value maps for SecurityStatus.
var (
	SecurityStatus_name = map[int32]string{
		0: "SECURITY_STATUS_UNSPECIFIED",
		1: "SECURITY_STATUS_NORMAL",
		2: "SECURITY_STATUS_HALTED",
		3: "SECURITY_STATUS_CLOSED",
	}
	SecurityStatus_value = map[string]int32{
		"SECURITY_STATUS_UNSPECIFIED": 0,
		"SECURITY_STATUS_NORMAL":      1,
		"SECURITY_STATUS_HALTED":      2,
		"SECURITY_STATUS_CLOSED":      3,
	}
)

func (x SecurityStatus) Enum() *SecurityStatus {
	p := new(SecurityStatus)
	*p = x
	return p
}

func (x SecurityStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecurityStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_schwabn_stream_v0_future_proto_enumTypes[0].Descriptor()
}

func (SecurityStatus) Type() protoreflect.EnumType {
	return &file_schwabn_stream_v0_future_proto_enumTypes[0]
}

func (x SecurityStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecurityStatus.Descriptor instead.
func (SecurityStatus) EnumDescriptor() ([]byte, []int) {
	return file_schwabn_stream_v0_future_proto_rawDescGZIP(), []int{0}
}

type ExchangeID int32

const (
	ExchangeID_EXCHANGE_ID_UNSPECIFIED ExchangeID = 0
	ExchangeID_EXCHANGE_ID_AMEX        ExchangeID = 1
	ExchangeID_EXCHANGE_ID_INDICATOR   ExchangeID = 2
	ExchangeID_EXCHANGE_ID_INDICES     ExchangeID = 3
	ExchangeID_EXCHANGE_ID_MUTUAL_FUND ExchangeID = 4
	ExchangeID_EXCHANGE_ID_NASDAQ      ExchangeID = 5
	ExchangeID_EXCHANGE_ID_NYSE        ExchangeID = 6
	ExchangeID_EXCHANGE_ID_PACIFIC     ExchangeID = 7
	ExchangeID_EXCHANGE_ID_PINKS       ExchangeID = 8
	ExchangeID_EXCHANGE_ID_OTCBB       ExchangeID = 9
)

// Enum value maps for ExchangeID.
var (
	ExchangeID_name = map[int32]string{
		0: "EXCHANGE_ID_UNSPECIFIED",
		1: "EXCHANGE_ID_AMEX",
		2: "EXCHANGE_ID_INDICATOR",
		3: "EXCHANGE_ID_INDICES",
		4: "EXCHANGE_ID_MUTUAL_FUND",
		5: "EXCHANGE_ID_NASDAQ",
		6: "EXCHANGE_ID_NYSE",
		7: "EXCHANGE_ID_PACIFIC",
		8: "EXCHANGE_ID_PINKS",
		9: "EXCHANGE_ID_OTCBB",
	}
	ExchangeID_value = map[string]int32{
		"EXCHANGE_ID_UNSPECIFIED": 0,
		"EXCHANGE_ID_AMEX":        1,
		"EXCHANGE_ID_INDICATOR":   2,
		"EXCHANGE_ID_INDICES":     3,
		"EXCHANGE_ID_MUTUAL_FUND": 4,
		"EXCHANGE_ID_NASDAQ":      5,
		"EXCHANGE_ID_NYSE":        6,
		"EXCHANGE_ID_PACIFIC":     7,
		"EXCHANGE_ID_PINKS":       8,
		"EXCHANGE_ID_OTCBB":       9,
	}
)

func (x ExchangeID) Enum() *ExchangeID {
	p := new(ExchangeID)
	*p = x
	return p
}

func (x ExchangeID) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeID) Descriptor() protoreflect.EnumDescriptor {
	return file_schwabn_stream_v0_future_proto_enumTypes[1].Descriptor()
}

func (ExchangeID) Type() protoreflect.EnumType {
	return &file_schwabn_stream_v0_future_proto_enumTypes[1]
}

func (x ExchangeID) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeID.Descriptor instead.
func (ExchangeID) EnumDescriptor() ([]byte, []int) {
	return file_schwabn_stream_v0_future_proto_rawDescGZIP(), []int{1}
}

type Month int32

const (
	Month_MONTH_UNSPECIFIED Month = 0
	Month_MONTH_JANUARY     Month = 1
	Month_MONTH_FEBRUARY    Month = 2
	Month_MONTH_MARCH       Month = 3
	Month_MONTH_APRIL       Month = 4
	Month_MONTH_MAY         Month = 5
	Month_MONTH_JUNE        Month = 6
	Month_MONTH_JULY        Month = 7
	Month_MONTH_AUGUST      Month = 8
	Month_MONTH_SEPTEMBER   Month = 9
	Month_MONTH_OCTOBER     Month = 10
	Month_MONTH_NOVEMBER    Month = 11
	Month_MONTH_DECEMBER    Month = 12
)

// Enum value maps for Month.
var (
	Month_name = map[int32]string{
		0:  "MONTH_UNSPECIFIED",
		1:  "MONTH_JANUARY",
		2:  "MONTH_FEBRUARY",
		3:  "MONTH_MARCH",
		4:  "MONTH_APRIL",
		5:  "MONTH_MAY",
		6:  "MONTH_JUNE",
		7:  "MONTH_JULY",
		8:  "MONTH_AUGUST",
		9:  "MONTH_SEPTEMBER",
		10: "MONTH_OCTOBER",
		11: "MONTH_NOVEMBER",
		12: "MONTH_DECEMBER",
	}
	Month_value = map[string]int32{
		"MONTH_UNSPECIFIED": 0,
		"MONTH_JANUARY":     1,
		"MONTH_FEBRUARY":    2,
		"MONTH_MARCH":       3,
		"MONTH_APRIL":       4,
		"MONTH_MAY":         5,
		"MONTH_JUNE":        6,
		"MONTH_JULY":        7,
		"MONTH_AUGUST":      8,
		"MONTH_SEPTEMBER":   9,
		"MONTH_OCTOBER":     10,
		"MONTH_NOVEMBER":    11,
		"MONTH_DECEMBER":    12,
	}
)

func (x Month) Enum() *Month {
	p := new(Month)
	*p = x
	return p
}

func (x Month) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Month) Descriptor() protoreflect.EnumDescriptor {
	return file_schwabn_stream_v0_future_proto_enumTypes[2].Descriptor()
}

func (Month) Type() protoreflect.EnumType {
	return &file_schwabn_stream_v0_future_proto_enumTypes[2]
}

func (x Month) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Month.Descriptor instead.
func (Month) EnumDescriptor() ([]byte, []int) {
	return file_schwabn_stream_v0_future_proto_rawDescGZIP(), []int{2}
}

type FutureID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol string `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Month  Month  `protobuf:"varint,2,opt,name=month,proto3,enum=stream.v0.Month" json:"month,omitempty"`
	// last 2 digits of the year
	Year uint32 `protobuf:"varint,3,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *FutureID) Reset() {
	*x = FutureID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schwabn_stream_v0_future_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FutureID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FutureID) ProtoMessage() {}

func (x *FutureID) ProtoReflect() protoreflect.Message {
	mi := &file_schwabn_stream_v0_future_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FutureID.ProtoReflect.Descriptor instead.
func (*FutureID) Descriptor() ([]byte, []int) {
	return file_schwabn_stream_v0_future_proto_rawDescGZIP(), []int{0}
}

func (x *FutureID) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *FutureID) GetMonth() Month {
	if x != nil {
		return x.Month
	}
	return Month_MONTH_UNSPECIFIED
}

func (x *FutureID) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type Future struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Core identification fields
	Symbol      *FutureID `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`           // Ticker symbol in upper case
	Description string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"` // Description of the product
	// Price-related fields
	BidPrice   float64 `protobuf:"fixed64,3,opt,name=bid_price,json=bidPrice,proto3" json:"bid_price,omitempty"`       // Current Best Bid Price
	AskPrice   float64 `protobuf:"fixed64,4,opt,name=ask_price,json=askPrice,proto3" json:"ask_price,omitempty"`       // Current Best Ask Price
	LastPrice  float64 `protobuf:"fixed64,5,opt,name=last_price,json=lastPrice,proto3" json:"last_price,omitempty"`    // Price at which the last trade was matched
	HighPrice  float64 `protobuf:"fixed64,6,opt,name=high_price,json=highPrice,proto3" json:"high_price,omitempty"`    // Day's high trade price
	LowPrice   float64 `protobuf:"fixed64,7,opt,name=low_price,json=lowPrice,proto3" json:"low_price,omitempty"`       // Day's low trade price
	ClosePrice float64 `protobuf:"fixed64,8,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"` // Previous day's closing price
	NetChange  float64 `protobuf:"fixed64,9,opt,name=net_change,json=netChange,proto3" json:"net_change,omitempty"`    // (CurrentLast - Prev Close)
	// Volume and size fields
	BidSize     int64 `protobuf:"varint,10,opt,name=bid_size,json=bidSize,proto3" json:"bid_size,omitempty"`             // Number of contracts for bid
	AskSize     int64 `protobuf:"varint,11,opt,name=ask_size,json=askSize,proto3" json:"ask_size,omitempty"`             // Number of contracts for ask
	TotalVolume int64 `protobuf:"varint,12,opt,name=total_volume,json=totalVolume,proto3" json:"total_volume,omitempty"` // Total contracts traded
	LastSize    int64 `protobuf:"varint,13,opt,name=last_size,json=lastSize,proto3" json:"last_size,omitempty"`          // Contracts traded in last transaction
	// Exchange information
	BidId        ExchangeID `protobuf:"varint,14,opt,name=bid_id,json=bidId,proto3,enum=stream.v0.ExchangeID" json:"bid_id,omitempty"`                // Exchange with best bid
	AskId        ExchangeID `protobuf:"varint,15,opt,name=ask_id,json=askId,proto3,enum=stream.v0.ExchangeID" json:"ask_id,omitempty"`                // Exchange with best ask
	ExchangeId   ExchangeID `protobuf:"varint,16,opt,name=exchange_id,json=exchangeId,proto3,enum=stream.v0.ExchangeID" json:"exchange_id,omitempty"` // Primary listing exchange
	LastId       ExchangeID `protobuf:"varint,17,opt,name=last_id,json=lastId,proto3,enum=stream.v0.ExchangeID" json:"last_id,omitempty"`             // Exchange where last trade occurred
	ExchangeName string     `protobuf:"bytes,18,opt,name=exchange_name,json=exchangeName,proto3" json:"exchange_name,omitempty"`                      // Name of exchange
	// Status and trading information
	SecurityStatus  SecurityStatus `protobuf:"varint,19,opt,name=security_status,json=securityStatus,proto3,enum=stream.v0.SecurityStatus" json:"security_status,omitempty"` // Trading status
	IsTradable      bool           `protobuf:"varint,20,opt,name=is_tradable,json=isTradable,proto3" json:"is_tradable,omitempty"`                                           // Flag indicating if contract is tradable
	IsActive        bool           `protobuf:"varint,21,opt,name=is_active,json=isActive,proto3" json:"is_active,omitempty"`                                                 // Indicates if contract is active
	QuotedInSession bool           `protobuf:"varint,22,opt,name=quoted_in_session,json=quotedInSession,proto3" json:"quoted_in_session,omitempty"`                          // Indicates quoting during active session
	// Time fields
	QuoteTime      *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=quote_time,json=quoteTime,proto3" json:"quote_time,omitempty"`                // Last quote time
	TradeTime      *timestamppb.Timestamp `protobuf:"bytes,24,opt,name=trade_time,json=tradeTime,proto3" json:"trade_time,omitempty"`                // Last trade time
	AskTime        *timestamppb.Timestamp `protobuf:"bytes,25,opt,name=ask_time,json=askTime,proto3" json:"ask_time,omitempty"`                      // Last ask-side quote time
	BidTime        *timestamppb.Timestamp `protobuf:"bytes,26,opt,name=bid_time,json=bidTime,proto3" json:"bid_time,omitempty"`                      // Last bid-side quote time
	ExpirationDate *timestamppb.Timestamp `protobuf:"bytes,27,opt,name=expiration_date,json=expirationDate,proto3" json:"expiration_date,omitempty"` // Contract expiration date
	SettlementDate *timestamppb.Timestamp `protobuf:"bytes,28,opt,name=settlement_date,json=settlementDate,proto3" json:"settlement_date,omitempty"` // Settlement date
	// Additional market data
	PercentChange   float64 `protobuf:"fixed64,29,opt,name=percent_change,json=percentChange,proto3" json:"percent_change,omitempty"`       // Price percentage change
	OpenInterest    int32   `protobuf:"varint,30,opt,name=open_interest,json=openInterest,proto3" json:"open_interest,omitempty"`           // Total open contracts
	Multiplier      float64 `protobuf:"fixed64,31,opt,name=multiplier,proto3" json:"multiplier,omitempty"`                                  // Point value
	Product         string  `protobuf:"bytes,32,opt,name=product,proto3" json:"product,omitempty"`                                          // Futures product
	FuturePriceFmt  string  `protobuf:"bytes,33,opt,name=future_price_fmt,json=futurePriceFmt,proto3" json:"future_price_fmt,omitempty"`    // Display format specification
	TradingHours    string  `protobuf:"bytes,34,opt,name=trading_hours,json=tradingHours,proto3" json:"trading_hours,omitempty"`            // Trading schedule
	ExpirationStyle string  `protobuf:"bytes,35,opt,name=expiration_style,json=expirationStyle,proto3" json:"expiration_style,omitempty"`   // Expiration style
	Mark            float64 `protobuf:"fixed64,36,opt,name=mark,proto3" json:"mark,omitempty"`                                              // Mark-to-market value
	Tick            float64 `protobuf:"fixed64,37,opt,name=tick,proto3" json:"tick,omitempty"`                                              // Minimum price movement
	TickAmount      float64 `protobuf:"fixed64,38,opt,name=tick_amount,json=tickAmount,proto3" json:"tick_amount,omitempty"`                // Minimum amount change
	ActiveSymbol    string  `protobuf:"bytes,39,opt,name=active_symbol,json=activeSymbol,proto3" json:"active_symbol,omitempty"`            // Active contract symbol
	SettlementPrice float64 `protobuf:"fixed64,40,opt,name=settlement_price,json=settlementPrice,proto3" json:"settlement_price,omitempty"` // Closing price
	OpenPrice       float64 `protobuf:"fixed64,41,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
}

func (x *Future) Reset() {
	*x = Future{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schwabn_stream_v0_future_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Future) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Future) ProtoMessage() {}

func (x *Future) ProtoReflect() protoreflect.Message {
	mi := &file_schwabn_stream_v0_future_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Future.ProtoReflect.Descriptor instead.
func (*Future) Descriptor() ([]byte, []int) {
	return file_schwabn_stream_v0_future_proto_rawDescGZIP(), []int{1}
}

func (x *Future) GetSymbol() *FutureID {
	if x != nil {
		return x.Symbol
	}
	return nil
}

func (x *Future) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Future) GetBidPrice() float64 {
	if x != nil {
		return x.BidPrice
	}
	return 0
}

func (x *Future) GetAskPrice() float64 {
	if x != nil {
		return x.AskPrice
	}
	return 0
}

func (x *Future) GetLastPrice() float64 {
	if x != nil {
		return x.LastPrice
	}
	return 0
}

func (x *Future) GetHighPrice() float64 {
	if x != nil {
		return x.HighPrice
	}
	return 0
}

func (x *Future) GetLowPrice() float64 {
	if x != nil {
		return x.LowPrice
	}
	return 0
}

func (x *Future) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *Future) GetNetChange() float64 {
	if x != nil {
		return x.NetChange
	}
	return 0
}

func (x *Future) GetBidSize() int64 {
	if x != nil {
		return x.BidSize
	}
	return 0
}

func (x *Future) GetAskSize() int64 {
	if x != nil {
		return x.AskSize
	}
	return 0
}

func (x *Future) GetTotalVolume() int64 {
	if x != nil {
		return x.TotalVolume
	}
	return 0
}

func (x *Future) GetLastSize() int64 {
	if x != nil {
		return x.LastSize
	}
	return 0
}

func (x *Future) GetBidId() ExchangeID {
	if x != nil {
		return x.BidId
	}
	return ExchangeID_EXCHANGE_ID_UNSPECIFIED
}

func (x *Future) GetAskId() ExchangeID {
	if x != nil {
		return x.AskId
	}
	return ExchangeID_EXCHANGE_ID_UNSPECIFIED
}

func (x *Future) GetExchangeId() ExchangeID {
	if x != nil {
		return x.ExchangeId
	}
	return ExchangeID_EXCHANGE_ID_UNSPECIFIED
}

func (x *Future) GetLastId() ExchangeID {
	if x != nil {
		return x.LastId
	}
	return ExchangeID_EXCHANGE_ID_UNSPECIFIED
}

func (x *Future) GetExchangeName() string {
	if x != nil {
		return x.ExchangeName
	}
	return ""
}

func (x *Future) GetSecurityStatus() SecurityStatus {
	if x != nil {
		return x.SecurityStatus
	}
	return SecurityStatus_SECURITY_STATUS_UNSPECIFIED
}

func (x *Future) GetIsTradable() bool {
	if x != nil {
		return x.IsTradable
	}
	return false
}

func (x *Future) GetIsActive() bool {
	if x != nil {
		return x.IsActive
	}
	return false
}

func (x *Future) GetQuotedInSession() bool {
	if x != nil {
		return x.QuotedInSession
	}
	return false
}

func (x *Future) GetQuoteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.QuoteTime
	}
	return nil
}

func (x *Future) GetTradeTime() *timestamppb.Timestamp {
	if x != nil {
		return x.TradeTime
	}
	return nil
}

func (x *Future) GetAskTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AskTime
	}
	return nil
}

func (x *Future) GetBidTime() *timestamppb.Timestamp {
	if x != nil {
		return x.BidTime
	}
	return nil
}

func (x *Future) GetExpirationDate() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpirationDate
	}
	return nil
}

func (x *Future) GetSettlementDate() *timestamppb.Timestamp {
	if x != nil {
		return x.SettlementDate
	}
	return nil
}

func (x *Future) GetPercentChange() float64 {
	if x != nil {
		return x.PercentChange
	}
	return 0
}

func (x *Future) GetOpenInterest() int32 {
	if x != nil {
		return x.OpenInterest
	}
	return 0
}

func (x *Future) GetMultiplier() float64 {
	if x != nil {
		return x.Multiplier
	}
	return 0
}

func (x *Future) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *Future) GetFuturePriceFmt() string {
	if x != nil {
		return x.FuturePriceFmt
	}
	return ""
}

func (x *Future) GetTradingHours() string {
	if x != nil {
		return x.TradingHours
	}
	return ""
}

func (x *Future) GetExpirationStyle() string {
	if x != nil {
		return x.ExpirationStyle
	}
	return ""
}

func (x *Future) GetMark() float64 {
	if x != nil {
		return x.Mark
	}
	return 0
}

func (x *Future) GetTick() float64 {
	if x != nil {
		return x.Tick
	}
	return 0
}

func (x *Future) GetTickAmount() float64 {
	if x != nil {
		return x.TickAmount
	}
	return 0
}

func (x *Future) GetActiveSymbol() string {
	if x != nil {
		return x.ActiveSymbol
	}
	return ""
}

func (x *Future) GetSettlementPrice() float64 {
	if x != nil {
		return x.SettlementPrice
	}
	return 0
}

func (x *Future) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

var File_schwabn_stream_v0_future_proto protoreflect.FileDescriptor

var file_schwabn_stream_v0_future_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x73, 0x63, 0x68, 0x77, 0x61, 0x62, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2f, 0x76, 0x30, 0x2f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a, 0x08,
	0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x12, 0x26, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x10, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x2e, 0x4d, 0x6f, 0x6e, 0x74,
	0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0xdf, 0x0c, 0x0a,
	0x06, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x76, 0x30, 0x2e, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x49, 0x44, 0x52, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x69, 0x64, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x77, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x08, 0x6c, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x09, 0x6e, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x62,
	0x69, 0x64, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x62,
	0x69, 0x64, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x73, 0x6b, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x56, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x2c, 0x0a, 0x06, 0x62, 0x69, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x05, 0x62, 0x69, 0x64, 0x49, 0x64, 0x12,
	0x2c, 0x0a, 0x06, 0x61, 0x73, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x2e, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x05, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x36, 0x0a,
	0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x0a, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x76, 0x30, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x44, 0x52, 0x06, 0x6c,
	0x61, 0x73, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x76, 0x30, 0x2e,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0e,
	0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x69, 0x73, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x54, 0x72, 0x61, 0x64, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x71, 0x75, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x61, 0x73, 0x6b, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x61, 0x73,
	0x6b, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x62, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x07, 0x62, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0f,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0e, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d,
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x65, 0x73, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x65,
	0x73, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x66, 0x6d, 0x74,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x46, 0x6d, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69,
	0x63, 0x6b, 0x18, 0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x74, 0x69, 0x63, 0x6b, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x69, 0x63, 0x6b, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x63, 0x6b, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f,
	0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x2a, 0x85,
	0x01, 0x0a, 0x0e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4e, 0x4f, 0x52, 0x4d, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1a,
	0x0a, 0x16, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x45,
	0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4c,
	0x4f, 0x53, 0x45, 0x44, 0x10, 0x03, 0x2a, 0x85, 0x02, 0x0a, 0x0a, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x17, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49,
	0x44, 0x5f, 0x41, 0x4d, 0x45, 0x58, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x58, 0x43, 0x48,
	0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x41, 0x54, 0x4f,
	0x52, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x49, 0x44, 0x5f, 0x49, 0x4e, 0x44, 0x49, 0x43, 0x45, 0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17,
	0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4d, 0x55, 0x54, 0x55,
	0x41, 0x4c, 0x5f, 0x46, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x58, 0x43,
	0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4e, 0x41, 0x53, 0x44, 0x41, 0x51, 0x10,
	0x05, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x4e, 0x59, 0x53, 0x45, 0x10, 0x06, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x50, 0x41, 0x43, 0x49, 0x46, 0x49, 0x43, 0x10, 0x07,
	0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x50, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x08, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x58, 0x43, 0x48, 0x41,
	0x4e, 0x47, 0x45, 0x5f, 0x49, 0x44, 0x5f, 0x4f, 0x54, 0x43, 0x42, 0x42, 0x10, 0x09, 0x2a, 0xf8,
	0x01, 0x0a, 0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x4a, 0x41, 0x4e, 0x55, 0x41, 0x52, 0x59,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x46, 0x45, 0x42, 0x52,
	0x55, 0x41, 0x52, 0x59, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f,
	0x4d, 0x41, 0x52, 0x43, 0x48, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x41, 0x50, 0x52, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x4e, 0x54,
	0x48, 0x5f, 0x4d, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x4a, 0x55, 0x4e, 0x45, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x4a, 0x55, 0x4c, 0x59, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x41, 0x55, 0x47, 0x55, 0x53, 0x54, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x5f, 0x53, 0x45, 0x50, 0x54, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x4f, 0x43, 0x54, 0x4f, 0x42, 0x45, 0x52, 0x10,
	0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x56, 0x45, 0x4d,
	0x42, 0x45, 0x52, 0x10, 0x0b, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x44,
	0x45, 0x43, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c, 0x42, 0x3a, 0x5a, 0x38, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x6e, 0x74, 0x68, 0x6f, 0x6e, 0x79, 0x48,
	0x65, 0x77, 0x69, 0x6e, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x77, 0x61, 0x62, 0x6e, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2f, 0x76, 0x30, 0x3b, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_schwabn_stream_v0_future_proto_rawDescOnce sync.Once
	file_schwabn_stream_v0_future_proto_rawDescData = file_schwabn_stream_v0_future_proto_rawDesc
)

func file_schwabn_stream_v0_future_proto_rawDescGZIP() []byte {
	file_schwabn_stream_v0_future_proto_rawDescOnce.Do(func() {
		file_schwabn_stream_v0_future_proto_rawDescData = protoimpl.X.CompressGZIP(file_schwabn_stream_v0_future_proto_rawDescData)
	})
	return file_schwabn_stream_v0_future_proto_rawDescData
}

var file_schwabn_stream_v0_future_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_schwabn_stream_v0_future_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_schwabn_stream_v0_future_proto_goTypes = []interface{}{
	(SecurityStatus)(0),           // 0: stream.v0.SecurityStatus
	(ExchangeID)(0),               // 1: stream.v0.ExchangeID
	(Month)(0),                    // 2: stream.v0.Month
	(*FutureID)(nil),              // 3: stream.v0.FutureID
	(*Future)(nil),                // 4: stream.v0.Future
	(*timestamppb.Timestamp)(nil), // 5: google.protobuf.Timestamp
}
var file_schwabn_stream_v0_future_proto_depIdxs = []int32{
	2,  // 0: stream.v0.FutureID.month:type_name -> stream.v0.Month
	3,  // 1: stream.v0.Future.symbol:type_name -> stream.v0.FutureID
	1,  // 2: stream.v0.Future.bid_id:type_name -> stream.v0.ExchangeID
	1,  // 3: stream.v0.Future.ask_id:type_name -> stream.v0.ExchangeID
	1,  // 4: stream.v0.Future.exchange_id:type_name -> stream.v0.ExchangeID
	1,  // 5: stream.v0.Future.last_id:type_name -> stream.v0.ExchangeID
	0,  // 6: stream.v0.Future.security_status:type_name -> stream.v0.SecurityStatus
	5,  // 7: stream.v0.Future.quote_time:type_name -> google.protobuf.Timestamp
	5,  // 8: stream.v0.Future.trade_time:type_name -> google.protobuf.Timestamp
	5,  // 9: stream.v0.Future.ask_time:type_name -> google.protobuf.Timestamp
	5,  // 10: stream.v0.Future.bid_time:type_name -> google.protobuf.Timestamp
	5,  // 11: stream.v0.Future.expiration_date:type_name -> google.protobuf.Timestamp
	5,  // 12: stream.v0.Future.settlement_date:type_name -> google.protobuf.Timestamp
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_schwabn_stream_v0_future_proto_init() }
func file_schwabn_stream_v0_future_proto_init() {
	if File_schwabn_stream_v0_future_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_schwabn_stream_v0_future_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FutureID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schwabn_stream_v0_future_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Future); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schwabn_stream_v0_future_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schwabn_stream_v0_future_proto_goTypes,
		DependencyIndexes: file_schwabn_stream_v0_future_proto_depIdxs,
		EnumInfos:         file_schwabn_stream_v0_future_proto_enumTypes,
		MessageInfos:      file_schwabn_stream_v0_future_proto_msgTypes,
	}.Build()
	File_schwabn_stream_v0_future_proto = out.File
	file_schwabn_stream_v0_future_proto_rawDesc = nil
	file_schwabn_stream_v0_future_proto_goTypes = nil
	file_schwabn_stream_v0_future_proto_depIdxs = nil
}
